// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"

    // this is the current target for running prisma in docker container
    binaryTargets = ["linux-musl-openssl-3.0.x", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
    output        = "./generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id         String     @id @default(uuid())
    firstName  String     @db.VarChar(255)
    lastName   String     @db.VarChar(255)
    email      String     @unique @db.VarChar(255)
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @default(now()) @updatedAt
    ownedHomes Home[]
    homes      UserHome[]

    @@map("user")
}

model UserHome {
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    home   Home   @relation(fields: [homeId], references: [id], onDelete: Cascade)
    homeId String

    @@id([userId, homeId])
    @@map("user_home")
}

model Home {
    id        String     @id @default(uuid())
    name      String     @db.VarChar(255)
    createdAt DateTime   @default(now())
    updatedAt DateTime   @default(now()) @updatedAt
    owner     User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId   String
    pets      Pet[]
    users     UserHome[]

    @@map("home")
}

model Pet {
    id        String   @id @default(uuid())
    name      String   @db.VarChar(255)
    type      String   @db.VarChar(255)
    gender    String   @db.VarChar(255)
    dob       DateTime
    breed     String   @db.VarChar(255)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
    home      Home     @relation(fields: [homeId], references: [id], onDelete: Cascade)
    homeId    String
    logs      PetLog[]

    @@map("pet")
}

model PetLog {
    id          String   @id @default(uuid())
    type        String   @db.VarChar(255)
    title       String   @db.VarChar(255)
    description String?  @db.VarChar(255)
    occurredAt  DateTime
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt
    pet         Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
    petId       String

    @@map("pet_log")
}
